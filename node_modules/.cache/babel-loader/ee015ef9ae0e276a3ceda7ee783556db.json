{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/claus/Documents/GitHub/Blog-react/Blog-react/src/containers/Blog/Posts/Posts.js\";\nimport React from 'react';\nimport axios from '../../../axios';\nimport Post from '../../../components/Post/Post';\nimport './Posts.css';\nimport { Link, Route } from 'react-router-dom';\nimport FullPost from '../FullPost/FullPost';\n\nclass Posts extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      posts: []\n    };\n\n    this.postSelectedHandler = id => {\n      // this.setState({ selectedPostId: id }); - case 1\n      // case 2 - navigating programatically, mostly used after a given operation has finished\n      //  - push string or object, both work\n      // this.props.history.push('/' + id)\n      this.props.history.push({\n        pathname: '/posts/' + id\n      });\n    };\n  }\n\n  componentDidMount() {\n    console.log(this.props);\n    axios.get('/posts').then(response => {\n      const posts = response.data.slice(0, 4);\n      const updatedPosts = posts.map(post => {\n        return { ...post,\n          author: 'Max'\n        };\n      });\n      this.setState({\n        posts: updatedPosts\n      }); // console.log( response );\n    }).catch(error => {\n      console.log(error); // this.setState({ error: true });\n    });\n  }\n\n  render() {\n    let posts = /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        textAlign: 'center'\n      },\n      children: \"Something went wrong!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this);\n\n    if (!this.state.error) {\n      posts = this.state.posts.map(post => {\n        return (\n          /*#__PURE__*/\n          // pass the [link to] property, turn it into an absolute path - case 1\n          // <Link to={'/' + post.id} key={post.id}>\n          _jsxDEV(Post, {\n            title: post.title,\n            author: post.author,\n            clicked: () => this.postSelectedHandler(post.id) // passing props to the <Post /> component with the spread operator\n            ,\n            ...this.props\n          }, post.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 11\n          }, this) // </Link> - case 1\n\n        );\n      });\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"Posts\",\n        children: posts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: this.props.match.url + '/:id',\n        component: FullPost\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Posts;","map":{"version":3,"sources":["/home/claus/Documents/GitHub/Blog-react/Blog-react/src/containers/Blog/Posts/Posts.js"],"names":["React","axios","Post","Link","Route","FullPost","Posts","Component","state","posts","postSelectedHandler","id","props","history","push","pathname","componentDidMount","console","log","get","then","response","data","slice","updatedPosts","map","post","author","setState","catch","error","render","textAlign","title","match","url"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAOC,IAAP,MAAiB,+BAAjB;AACA,OAAO,aAAP;AACA,SAASC,IAAT,EAAeC,KAAf,QAA4B,kBAA5B;AACA,OAAOC,QAAP,MAAqB,sBAArB;;AAEA,MAAMC,KAAN,SAAoBN,KAAK,CAACO,SAA1B,CAAoC;AAAA;AAAA;AAAA,SAClCC,KADkC,GAC1B;AACNC,MAAAA,KAAK,EAAE;AADD,KAD0B;;AAAA,SA0BlCC,mBA1BkC,GA0BXC,EAAD,IAAQ;AAC5B;AACA;AACA;AACA;AACA,WAAKC,KAAL,CAAWC,OAAX,CAAmBC,IAAnB,CAAwB;AAAEC,QAAAA,QAAQ,EAAE,YAAYJ;AAAxB,OAAxB;AACD,KAhCiC;AAAA;;AAKlCK,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKN,KAAjB;AACAX,IAAAA,KAAK,CACFkB,GADH,CACO,QADP,EAEGC,IAFH,CAESC,QAAD,IAAc;AAClB,YAAMZ,KAAK,GAAGY,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoB,CAApB,EAAuB,CAAvB,CAAd;AACA,YAAMC,YAAY,GAAGf,KAAK,CAACgB,GAAN,CAAWC,IAAD,IAAU;AACvC,eAAO,EACL,GAAGA,IADE;AAELC,UAAAA,MAAM,EAAE;AAFH,SAAP;AAID,OALoB,CAArB;AAMA,WAAKC,QAAL,CAAc;AAAEnB,QAAAA,KAAK,EAAEe;AAAT,OAAd,EARkB,CASlB;AACD,KAZH,EAaGK,KAbH,CAaUC,KAAD,IAAW;AAChBb,MAAAA,OAAO,CAACC,GAAR,CAAYY,KAAZ,EADgB,CAEhB;AACD,KAhBH;AAiBD;;AAUDC,EAAAA,MAAM,GAAG;AACP,QAAItB,KAAK,gBACP;AAAG,MAAA,KAAK,EAAE;AAAEuB,QAAAA,SAAS,EAAE;AAAb,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;;AAGA,QAAI,CAAC,KAAKxB,KAAL,CAAWsB,KAAhB,EAAuB;AACrBrB,MAAAA,KAAK,GAAG,KAAKD,KAAL,CAAWC,KAAX,CAAiBgB,GAAjB,CAAsBC,IAAD,IAAU;AACrC;AAAA;AACE;AACA;AACA,kBAAC,IAAD;AAEE,YAAA,KAAK,EAAEA,IAAI,CAACO,KAFd;AAGE,YAAA,MAAM,EAAEP,IAAI,CAACC,MAHf;AAIE,YAAA,OAAO,EAAE,MAAM,KAAKjB,mBAAL,CAAyBgB,IAAI,CAACf,EAA9B,CAJjB,CAKE;AALF;AAAA,eAMM,KAAKC;AANX,aACOc,IAAI,CAACf,EADZ;AAAA;AAAA;AAAA;AAAA,kBAHF,CAWE;;AAXF;AAaD,OAdO,CAAR;AAeD;;AACD,wBACE;AAAA,8BACE;AAAS,QAAA,SAAS,EAAC,OAAnB;AAAA,kBAA4BF;AAA5B;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,KAAD;AACE,QAAA,IAAI,EAAE,KAAKG,KAAL,CAAWsB,KAAX,CAAiBC,GAAjB,GAAuB,MAD/B;AAGE,QAAA,SAAS,EAAE9B;AAHb;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAUD;;AAjEiC;;AAoEpC,eAAeC,KAAf","sourcesContent":["import React from 'react';\nimport axios from '../../../axios';\nimport Post from '../../../components/Post/Post';\nimport './Posts.css';\nimport { Link, Route } from 'react-router-dom';\nimport FullPost from '../FullPost/FullPost';\n\nclass Posts extends React.Component {\n  state = {\n    posts: [],\n  };\n\n  componentDidMount() {\n    console.log(this.props);\n    axios\n      .get('/posts')\n      .then((response) => {\n        const posts = response.data.slice(0, 4);\n        const updatedPosts = posts.map((post) => {\n          return {\n            ...post,\n            author: 'Max',\n          };\n        });\n        this.setState({ posts: updatedPosts });\n        // console.log( response );\n      })\n      .catch((error) => {\n        console.log(error);\n        // this.setState({ error: true });\n      });\n  }\n\n  postSelectedHandler = (id) => {\n    // this.setState({ selectedPostId: id }); - case 1\n    // case 2 - navigating programatically, mostly used after a given operation has finished\n    //  - push string or object, both work\n    // this.props.history.push('/' + id)\n    this.props.history.push({ pathname: '/posts/' + id });\n  };\n\n  render() {\n    let posts = (\n      <p style={{ textAlign: 'center' }}>Something went wrong!</p>\n    );\n    if (!this.state.error) {\n      posts = this.state.posts.map((post) => {\n        return (\n          // pass the [link to] property, turn it into an absolute path - case 1\n          // <Link to={'/' + post.id} key={post.id}>\n          <Post\n            key={post.id}\n            title={post.title}\n            author={post.author}\n            clicked={() => this.postSelectedHandler(post.id)}\n            // passing props to the <Post /> component with the spread operator\n            {...this.props}\n          />\n          // </Link> - case 1\n        );\n      });\n    }\n    return (\n      <div>\n        <section className=\"Posts\">{posts}</section>\n        <Route\n          path={this.props.match.url + '/:id'}\n          \n          component={FullPost}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Posts;\n"]},"metadata":{},"sourceType":"module"}